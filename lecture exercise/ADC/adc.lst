
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000cbc  00000d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800100  00800100  00000d50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021bb  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c65  00000000  00000000  00002fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000beb  00000000  00000000  00003c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00004810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000591  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cb8  00000000  00000000  00004fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00006c81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 34       	cpi	r26, 0x44	; 68
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 71 05 	call	0xae2	; 0xae2 <main>
  ac:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <spi_init>:
//div_t    fp_adc_result, fp_low_result;  //double fp_adc_result; 

/*******************************************************/
void spi_init(void){
 /* Run this code before attempting to write to the LCD.*/
 DDRF  |= 0x08;  //port F bit 3 is enabling for LCD
  b4:	e1 e6       	ldi	r30, 0x61	; 97
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	80 83       	st	Z, r24
 PORTF &= 0xF7;  //port F bit 3 is initially low
  be:	e2 e6       	ldi	r30, 0x62	; 98
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	80 83       	st	Z, r24

 DDRB  |= 0x07;  //Turn on SS_n, MOSI, SCLK. SS_n must be out for MSTR mode
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	87 bb       	out	0x17, r24	; 23
//see: /$install_path/avr/include/avr/iom128.h for bit definitions   

 //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
 SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
  ce:	80 e5       	ldi	r24, 0x50	; 80
  d0:	8d b9       	out	0x0d, r24	; 13
 SPSR=(1<<SPI2X);           //SPI at 2x speed (8 MHz)  
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	8e b9       	out	0x0e, r24	; 14
 }
  d6:	08 95       	ret

000000d8 <send_lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	81 11       	cpse	r24, r1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <send_lcd+0x8>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  e2:	77 9b       	sbis	0x0e, 7	; 14
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <send_lcd+0xa>
  SPDR = byte;                        //send payload
  e6:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  e8:	77 9b       	sbis	0x0e, 7	; 14
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <send_lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
  ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e9       	ldi	r24, 0x9F	; 159
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <send_lcd+0x2c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <send_lcd+0x32>
 10a:	00 00       	nop
  LCD_PORT   = temp | (byte << 4);    //output lower nibble second
  strobe_lcd();                       //send to LCD
  if(cmd_or_char==0x01) {_delay_us(100);}  //typ 1ms for CMDs, 100uS for CHARs
  else                  {_delay_us(1000);}
#endif
}
 10c:	08 95       	ret

0000010e <refresh_lcd>:

void refresh_lcd(char lcd_string_array[]) {

    static uint8_t index=0;           // index into string array 

    SPDR = 0x01; //set SR for data
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
 112:	77 9b       	sbis	0x0e, 7	; 14
 114:	fe cf       	rjmp	.-4      	; 0x112 <refresh_lcd+0x4>
    SPDR = lcd_string_array[index];
 116:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	e8 0f       	add	r30, r24
 11c:	f9 2f       	mov	r31, r25
 11e:	f1 1d       	adc	r31, r1
 120:	80 81       	ld	r24, Z
 122:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
 124:	77 9b       	sbis	0x0e, 7	; 14
 126:	fe cf       	rjmp	.-4      	; 0x124 <refresh_lcd+0x16>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 128:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 132:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    SPDR = 0x01; //set SR for data
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
 146:	80 31       	cpi	r24, 0x10	; 16
 148:	09 f1       	breq	.+66     	; 0x18c <refresh_lcd+0x7e>
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
 14a:	80 32       	cpi	r24, 0x20	; 32
 14c:	09 f0       	breq	.+2      	; 0x150 <refresh_lcd+0x42>
}//refresh_lcd
 14e:	08 95       	ret
 150:	95 ed       	ldi	r25, 0xD5	; 213
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <refresh_lcd+0x44>
 156:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 158:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 15a:	77 9b       	sbis	0x0e, 7	; 14
 15c:	fe cf       	rjmp	.-4      	; 0x15a <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 162:	77 9b       	sbis	0x0e, 7	; 14
 164:	fe cf       	rjmp	.-4      	; 0x162 <refresh_lcd+0x54>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 166:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 170:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 174:	87 7f       	andi	r24, 0xF7	; 247
 176:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 17a:	8f e9       	ldi	r24, 0x9F	; 159
 17c:	9f e0       	ldi	r25, 0x0F	; 15
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <refresh_lcd+0x70>
 182:	00 c0       	rjmp	.+0      	; 0x184 <refresh_lcd+0x76>
 184:	00 00       	nop
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
 186:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}//refresh_lcd
 18a:	08 95       	ret
 18c:	85 ed       	ldi	r24, 0xD5	; 213
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <refresh_lcd+0x80>
 192:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 194:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 196:	77 9b       	sbis	0x0e, 7	; 14
 198:	fe cf       	rjmp	.-4      	; 0x196 <refresh_lcd+0x88>
  SPDR = byte;                        //send payload
 19a:	80 ec       	ldi	r24, 0xC0	; 192
 19c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 19e:	77 9b       	sbis	0x0e, 7	; 14
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <refresh_lcd+0x90>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 1a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <refresh_lcd+0xac>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <refresh_lcd+0xb2>
 1c0:	00 00       	nop
 1c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	c1 cf       	rjmp	.-126    	; 0x14a <refresh_lcd+0x3c>

000001c8 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
 1c8:	66 0f       	add	r22, r22
 1ca:	66 0f       	add	r22, r22
 1cc:	66 0f       	add	r22, r22
 1ce:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 1d0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 1d2:	77 9b       	sbis	0x0e, 7	; 14
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
 1d6:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 1d8:	77 9b       	sbis	0x0e, 7	; 14
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <set_custom_character+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 1dc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1e0:	28 60       	ori	r18, 0x08	; 8
 1e2:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1e6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1ea:	27 7f       	andi	r18, 0xF7	; 247
 1ec:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1f0:	af e9       	ldi	r26, 0x9F	; 159
 1f2:	bf e0       	ldi	r27, 0x0F	; 15
 1f4:	11 97       	sbiw	r26, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <set_custom_character+0x2c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <set_custom_character+0x32>
 1fa:	00 00       	nop
 1fc:	fc 01       	movw	r30, r24
 1fe:	9c 01       	movw	r18, r24
 200:	28 5f       	subi	r18, 0xF8	; 248
 202:	3f 4f       	sbci	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 204:	91 e0       	ldi	r25, 0x01	; 1
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
 206:	81 91       	ld	r24, Z+
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 208:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 20a:	77 9b       	sbis	0x0e, 7	; 14
 20c:	fe cf       	rjmp	.-4      	; 0x20a <set_custom_character+0x42>
  SPDR = byte;                        //send payload
 20e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 210:	77 9b       	sbis	0x0e, 7	; 14
 212:	fe cf       	rjmp	.-4      	; 0x210 <set_custom_character+0x48>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 214:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 218:	88 60       	ori	r24, 0x08	; 8
 21a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 21e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 222:	87 7f       	andi	r24, 0xF7	; 247
 224:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 228:	af e9       	ldi	r26, 0x9F	; 159
 22a:	bf e0       	ldi	r27, 0x0F	; 15
 22c:	11 97       	sbiw	r26, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <set_custom_character+0x64>
 230:	00 c0       	rjmp	.+0      	; 0x232 <set_custom_character+0x6a>
 232:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
 234:	e2 17       	cp	r30, r18
 236:	f3 07       	cpc	r31, r19
 238:	31 f7       	brne	.-52     	; 0x206 <set_custom_character+0x3e>
}
 23a:	08 95       	ret

0000023c <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
 23c:	8d 5f       	subi	r24, 0xFD	; 253
 23e:	82 95       	swap	r24
 240:	88 0f       	add	r24, r24
 242:	88 0f       	add	r24, r24
 244:	80 7c       	andi	r24, 0xC0	; 192
 246:	60 58       	subi	r22, 0x80	; 128
 248:	68 0f       	add	r22, r24
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 24a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 24c:	77 9b       	sbis	0x0e, 7	; 14
 24e:	fe cf       	rjmp	.-4      	; 0x24c <set_cursor+0x10>
  SPDR = byte;                        //send payload
 250:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 252:	77 9b       	sbis	0x0e, 7	; 14
 254:	fe cf       	rjmp	.-4      	; 0x252 <set_cursor+0x16>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 256:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 25a:	88 60       	ori	r24, 0x08	; 8
 25c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 260:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 264:	87 7f       	andi	r24, 0xF7	; 247
 266:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 26a:	8f e9       	ldi	r24, 0x9F	; 159
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <set_cursor+0x32>
 272:	00 c0       	rjmp	.+0      	; 0x274 <set_cursor+0x38>
 274:	00 00       	nop
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
}
 276:	08 95       	ret

00000278 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
 278:	81 11       	cpse	r24, r1
 27a:	19 c0       	rjmp	.+50     	; 0x2ae <uint2lcd+0x36>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 280:	77 9b       	sbis	0x0e, 7	; 14
 282:	fe cf       	rjmp	.-4      	; 0x280 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
 284:	80 e3       	ldi	r24, 0x30	; 48
 286:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 288:	77 9b       	sbis	0x0e, 7	; 14
 28a:	fe cf       	rjmp	.-4      	; 0x288 <uint2lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 28c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 290:	88 60       	ori	r24, 0x08	; 8
 292:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 296:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2a0:	8f e9       	ldi	r24, 0x9F	; 159
 2a2:	9f e0       	ldi	r25, 0x0F	; 15
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <uint2lcd+0x2c>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <uint2lcd+0x32>
 2aa:	00 00       	nop
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
    }
}
 2ac:	08 95       	ret
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
 2ae:	84 36       	cpi	r24, 0x64	; 100
 2b0:	c0 f4       	brcc	.+48     	; 0x2e2 <uint2lcd+0x6a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
 2b2:	8a 30       	cpi	r24, 0x0A	; 10
 2b4:	a0 f5       	brcc	.+104    	; 0x31e <uint2lcd+0xa6>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
 2b6:	9d ec       	ldi	r25, 0xCD	; 205
 2b8:	89 9f       	mul	r24, r25
 2ba:	91 2d       	mov	r25, r1
 2bc:	11 24       	eor	r1, r1
 2be:	96 95       	lsr	r25
 2c0:	96 95       	lsr	r25
 2c2:	96 95       	lsr	r25
 2c4:	29 2f       	mov	r18, r25
 2c6:	22 0f       	add	r18, r18
 2c8:	22 0f       	add	r18, r18
 2ca:	92 0f       	add	r25, r18
 2cc:	99 0f       	add	r25, r25
 2ce:	89 1b       	sub	r24, r25
 2d0:	80 5d       	subi	r24, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2d6:	77 9b       	sbis	0x0e, 7	; 14
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <uint2lcd+0x5e>
  SPDR = byte;                        //send payload
 2da:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2dc:	77 9b       	sbis	0x0e, 7	; 14
 2de:	fe cf       	rjmp	.-4      	; 0x2dc <uint2lcd+0x64>
 2e0:	d5 cf       	rjmp	.-86     	; 0x28c <uint2lcd+0x14>
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
 2e2:	99 e2       	ldi	r25, 0x29	; 41
 2e4:	89 9f       	mul	r24, r25
 2e6:	91 2d       	mov	r25, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	92 95       	swap	r25
 2ec:	9f 70       	andi	r25, 0x0F	; 15
 2ee:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2f4:	77 9b       	sbis	0x0e, 7	; 14
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <uint2lcd+0x7c>
  SPDR = byte;                        //send payload
 2f8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2fa:	77 9b       	sbis	0x0e, 7	; 14
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <uint2lcd+0x82>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2fe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 302:	98 60       	ori	r25, 0x08	; 8
 304:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 308:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 30c:	97 7f       	andi	r25, 0xF7	; 247
 30e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 312:	ef e9       	ldi	r30, 0x9F	; 159
 314:	ff e0       	ldi	r31, 0x0F	; 15
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <uint2lcd+0x9e>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <uint2lcd+0xa4>
 31c:	00 00       	nop
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
 31e:	99 e2       	ldi	r25, 0x29	; 41
 320:	89 9f       	mul	r24, r25
 322:	91 2d       	mov	r25, r1
 324:	11 24       	eor	r1, r1
 326:	92 95       	swap	r25
 328:	9f 70       	andi	r25, 0x0F	; 15
 32a:	28 2f       	mov	r18, r24
 32c:	f4 e6       	ldi	r31, 0x64	; 100
 32e:	9f 9f       	mul	r25, r31
 330:	20 19       	sub	r18, r0
 332:	11 24       	eor	r1, r1
 334:	92 2f       	mov	r25, r18
 336:	2d ec       	ldi	r18, 0xCD	; 205
 338:	92 9f       	mul	r25, r18
 33a:	91 2d       	mov	r25, r1
 33c:	11 24       	eor	r1, r1
 33e:	96 95       	lsr	r25
 340:	96 95       	lsr	r25
 342:	96 95       	lsr	r25
 344:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 34a:	77 9b       	sbis	0x0e, 7	; 14
 34c:	fe cf       	rjmp	.-4      	; 0x34a <uint2lcd+0xd2>
  SPDR = byte;                        //send payload
 34e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 350:	77 9b       	sbis	0x0e, 7	; 14
 352:	fe cf       	rjmp	.-4      	; 0x350 <uint2lcd+0xd8>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 354:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 358:	98 60       	ori	r25, 0x08	; 8
 35a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 35e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 362:	97 7f       	andi	r25, 0xF7	; 247
 364:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 368:	ef e9       	ldi	r30, 0x9F	; 159
 36a:	ff e0       	ldi	r31, 0x0F	; 15
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <uint2lcd+0xf4>
 370:	00 c0       	rjmp	.+0      	; 0x372 <uint2lcd+0xfa>
 372:	00 00       	nop
 374:	a0 cf       	rjmp	.-192    	; 0x2b6 <uint2lcd+0x3e>

00000376 <int2lcd>:
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
 376:	87 ff       	sbrs	r24, 7
 378:	1b c0       	rjmp	.+54     	; 0x3b0 <int2lcd+0x3a>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 37e:	77 9b       	sbis	0x0e, 7	; 14
 380:	fe cf       	rjmp	.-4      	; 0x37e <int2lcd+0x8>
  SPDR = byte;                        //send payload
 382:	9d e2       	ldi	r25, 0x2D	; 45
 384:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 386:	77 9b       	sbis	0x0e, 7	; 14
 388:	fe cf       	rjmp	.-4      	; 0x386 <int2lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 38a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 38e:	98 60       	ori	r25, 0x08	; 8
 390:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 394:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 398:	97 7f       	andi	r25, 0xF7	; 247
 39a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 39e:	ef e9       	ldi	r30, 0x9F	; 159
 3a0:	ff e0       	ldi	r31, 0x0F	; 15
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <int2lcd+0x2c>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <int2lcd+0x32>
 3a8:	00 00       	nop
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
 3aa:	81 95       	neg	r24
 3ac:	0c 94 3c 01 	jmp	0x278	; 0x278 <uint2lcd>
    else                                    {uint2lcd(number);}
 3b0:	0c 94 3c 01 	jmp	0x278	; 0x278 <uint2lcd>

000003b4 <cursor_on>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3b4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3b6:	77 9b       	sbis	0x0e, 7	; 14
 3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <cursor_on+0x2>
  SPDR = byte;                        //send payload
 3ba:	8e e0       	ldi	r24, 0x0E	; 14
 3bc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3be:	77 9b       	sbis	0x0e, 7	; 14
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <cursor_on+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c6:	88 60       	ori	r24, 0x08	; 8
 3c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3d0:	87 7f       	andi	r24, 0xF7	; 247
 3d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3d6:	8f e9       	ldi	r24, 0x9F	; 159
 3d8:	9f e0       	ldi	r25, 0x0F	; 15
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <cursor_on+0x26>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <cursor_on+0x2c>
 3e0:	00 00       	nop

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E, 1000);}
 3e2:	08 95       	ret

000003e4 <cursor_off>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3e4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3e6:	77 9b       	sbis	0x0e, 7	; 14
 3e8:	fe cf       	rjmp	.-4      	; 0x3e6 <cursor_off+0x2>
  SPDR = byte;                        //send payload
 3ea:	8c e0       	ldi	r24, 0x0C	; 12
 3ec:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3ee:	77 9b       	sbis	0x0e, 7	; 14
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <cursor_off+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3f6:	88 60       	ori	r24, 0x08	; 8
 3f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 400:	87 7f       	andi	r24, 0xF7	; 247
 402:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 406:	8f e9       	ldi	r24, 0x9F	; 159
 408:	9f e0       	ldi	r25, 0x0F	; 15
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C, 1000);}
 412:	08 95       	ret

00000414 <shift_right>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 414:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 416:	77 9b       	sbis	0x0e, 7	; 14
 418:	fe cf       	rjmp	.-4      	; 0x416 <shift_right+0x2>
  SPDR = byte;                        //send payload
 41a:	8e e1       	ldi	r24, 0x1E	; 30
 41c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 41e:	77 9b       	sbis	0x0e, 7	; 14
 420:	fe cf       	rjmp	.-4      	; 0x41e <shift_right+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 422:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 426:	88 60       	ori	r24, 0x08	; 8
 428:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 42c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 430:	87 7f       	andi	r24, 0xF7	; 247
 432:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 436:	8f e9       	ldi	r24, 0x9F	; 159
 438:	9f e0       	ldi	r25, 0x0F	; 15
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <shift_right+0x26>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <shift_right+0x2c>
 440:	00 00       	nop

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E, 1000);}
 442:	08 95       	ret

00000444 <shift_left>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 444:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 446:	77 9b       	sbis	0x0e, 7	; 14
 448:	fe cf       	rjmp	.-4      	; 0x446 <shift_left+0x2>
  SPDR = byte;                        //send payload
 44a:	88 e1       	ldi	r24, 0x18	; 24
 44c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 44e:	77 9b       	sbis	0x0e, 7	; 14
 450:	fe cf       	rjmp	.-4      	; 0x44e <shift_left+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 452:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 456:	88 60       	ori	r24, 0x08	; 8
 458:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 45c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 460:	87 7f       	andi	r24, 0xF7	; 247
 462:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 466:	8f e9       	ldi	r24, 0x9F	; 159
 468:	9f e0       	ldi	r25, 0x0F	; 15
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <shift_left+0x26>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <shift_left+0x2c>
 470:	00 00       	nop

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18, 1000);}
 472:	08 95       	ret

00000474 <strobe_lcd>:
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 474:	e2 e6       	ldi	r30, 0x62	; 98
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	88 60       	ori	r24, 0x08	; 8
 47c:	80 83       	st	Z, r24
 47e:	80 81       	ld	r24, Z
 480:	87 7f       	andi	r24, 0xF7	; 247
 482:	80 83       	st	Z, r24
 LCD_PORT |= (1<<LCD_STROBE_BIT);           //set strobe bit
 asm("nop"); asm("nop"); asm("nop"); asm("nop"); //4 cycle wait 
 LCD_PORT &= ~(1<<LCD_STROBE_BIT);          //clear strobe bit
 asm("nop"); asm("nop"); asm("nop"); asm("nop"); //4 cycle wait 
#endif
}
 484:	08 95       	ret

00000486 <clear_display>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 486:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 488:	77 9b       	sbis	0x0e, 7	; 14
 48a:	fe cf       	rjmp	.-4      	; 0x488 <clear_display+0x2>
  SPDR = byte;                        //send payload
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 490:	77 9b       	sbis	0x0e, 7	; 14
 492:	fe cf       	rjmp	.-4      	; 0x490 <clear_display+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 494:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 498:	88 60       	ori	r24, 0x08	; 8
 49a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 49e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4a2:	87 7f       	andi	r24, 0xF7	; 247
 4a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4a8:	8f e9       	ldi	r24, 0x9F	; 159
 4aa:	9f e0       	ldi	r25, 0x0F	; 15
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <clear_display+0x26>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <clear_display+0x2c>
 4b2:	00 00       	nop
}
 
//-----------------------------------------------------------------------------
//                          clear_display  
//
void clear_display(void){send_lcd(CMD_BYTE, 0x01,2000);} //2ms wait for LCD
 4b4:	08 95       	ret

000004b6 <cursor_home>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4b6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4b8:	77 9b       	sbis	0x0e, 7	; 14
 4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <cursor_home+0x2>
  SPDR = byte;                        //send payload
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4c0:	77 9b       	sbis	0x0e, 7	; 14
 4c2:	fe cf       	rjmp	.-4      	; 0x4c0 <cursor_home+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c8:	88 60       	ori	r24, 0x08	; 8
 4ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4d2:	87 7f       	andi	r24, 0xF7	; 247
 4d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4d8:	8f e9       	ldi	r24, 0x9F	; 159
 4da:	9f e0       	ldi	r25, 0x0F	; 15
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <cursor_home+0x26>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <cursor_home+0x2c>
 4e2:	00 00       	nop

//-----------------------------------------------------------------------------
//                          cursor_home    
//
//Set cursor to row 0, column 0.
void cursor_home(void){send_lcd(CMD_BYTE, 0x02,1500);} //1.5ms wait for LCD
 4e4:	08 95       	ret

000004e6 <home_line2>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4e6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4e8:	77 9b       	sbis	0x0e, 7	; 14
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <home_line2+0x2>
  SPDR = byte;                        //send payload
 4ec:	80 ec       	ldi	r24, 0xC0	; 192
 4ee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4f0:	77 9b       	sbis	0x0e, 7	; 14
 4f2:	fe cf       	rjmp	.-4      	; 0x4f0 <home_line2+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4f8:	88 60       	ori	r24, 0x08	; 8
 4fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 502:	87 7f       	andi	r24, 0xF7	; 247
 504:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 508:	8f e9       	ldi	r24, 0x9F	; 159
 50a:	9f e0       	ldi	r25, 0x0F	; 15
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <home_line2+0x26>
 510:	00 c0       	rjmp	.+0      	; 0x512 <home_line2+0x2c>
 512:	00 00       	nop
  
//-----------------------------------------------------------------------------
//                          home_line2    
//
//Put cursor at row 1, column 0
void home_line2(void){send_lcd(CMD_BYTE, 0xC0,1500);} //1.5ms wait for LCD
 514:	08 95       	ret

00000516 <fill_spaces>:
 
//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 516:	90 e1       	ldi	r25, 0x10	; 16
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 518:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 51a:	20 e2       	ldi	r18, 0x20	; 32
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 51c:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 51e:	77 9b       	sbis	0x0e, 7	; 14
 520:	fe cf       	rjmp	.-4      	; 0x51e <fill_spaces+0x8>
  SPDR = byte;                        //send payload
 522:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 524:	77 9b       	sbis	0x0e, 7	; 14
 526:	fe cf       	rjmp	.-4      	; 0x524 <fill_spaces+0xe>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 528:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 52c:	88 60       	ori	r24, 0x08	; 8
 52e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 532:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 536:	87 7f       	andi	r24, 0xF7	; 247
 538:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 53c:	ef e9       	ldi	r30, 0x9F	; 159
 53e:	ff e0       	ldi	r31, 0x0F	; 15
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <fill_spaces+0x2a>
 544:	00 c0       	rjmp	.+0      	; 0x546 <fill_spaces+0x30>
 546:	00 00       	nop
 548:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 54a:	41 f7       	brne	.-48     	; 0x51c <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
	}
}  
 54c:	08 95       	ret

0000054e <char2lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 552:	77 9b       	sbis	0x0e, 7	; 14
 554:	fe cf       	rjmp	.-4      	; 0x552 <char2lcd+0x4>
  SPDR = byte;                        //send payload
 556:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 558:	77 9b       	sbis	0x0e, 7	; 14
 55a:	fe cf       	rjmp	.-4      	; 0x558 <char2lcd+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 55c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 560:	88 60       	ori	r24, 0x08	; 8
 562:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 566:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 56a:	87 7f       	andi	r24, 0xF7	; 247
 56c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 570:	8f e9       	ldi	r24, 0x9F	; 159
 572:	9f e0       	ldi	r25, 0x0F	; 15
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <char2lcd+0x26>
 578:	00 c0       	rjmp	.+0      	; 0x57a <char2lcd+0x2c>
 57a:	00 00       	nop
//----------------------------------------------------------------------------
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char, 100);} //100us wait after char
 57c:	08 95       	ret

0000057e <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 57e:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	40 e0       	ldi	r20, 0x00	; 0
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 586:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
 588:	4e 0f       	add	r20, r30
 58a:	5f 1f       	adc	r21, r31
 58c:	da 01       	movw	r26, r20
 58e:	8c 91       	ld	r24, X
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 590:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 592:	77 9b       	sbis	0x0e, 7	; 14
 594:	fe cf       	rjmp	.-4      	; 0x592 <string2lcd+0x14>
  SPDR = byte;                        //send payload
 596:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 598:	77 9b       	sbis	0x0e, 7	; 14
 59a:	fe cf       	rjmp	.-4      	; 0x598 <string2lcd+0x1a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 59c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a0:	98 60       	ori	r25, 0x08	; 8
 5a2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5aa:	97 7f       	andi	r25, 0xF7	; 247
 5ac:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5b0:	8f e9       	ldi	r24, 0x9F	; 159
 5b2:	9f e0       	ldi	r25, 0x0F	; 15
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <string2lcd+0x36>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <string2lcd+0x3c>
 5ba:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
 5bc:	6f 5f       	subi	r22, 0xFF	; 255
 5be:	46 2f       	mov	r20, r22
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	df 01       	movw	r26, r30
 5c4:	0d 90       	ld	r0, X+
 5c6:	00 20       	and	r0, r0
 5c8:	e9 f7       	brne	.-6      	; 0x5c4 <string2lcd+0x46>
 5ca:	9d 01       	movw	r18, r26
 5cc:	2e 1b       	sub	r18, r30
 5ce:	3f 0b       	sbc	r19, r31
 5d0:	22 50       	subi	r18, 0x02	; 2
 5d2:	31 09       	sbc	r19, r1
 5d4:	24 17       	cp	r18, r20
 5d6:	35 07       	cpc	r19, r21
 5d8:	b8 f6       	brcc	.-82     	; 0x588 <string2lcd+0xa>
} 
 5da:	08 95       	ret

000005dc <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	99 ef       	ldi	r25, 0xF9	; 249
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <lcd_init+0x4>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <lcd_init+0xa>
 5e6:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! should not be here.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 5e8:	88 e0       	ldi	r24, 0x08	; 8
 5ea:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5ee:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5f0:	77 9b       	sbis	0x0e, 7	; 14
 5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <lcd_init+0x14>
  SPDR = byte;                        //send payload
 5f4:	80 e3       	ldi	r24, 0x30	; 48
 5f6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5f8:	77 9b       	sbis	0x0e, 7	; 14
 5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <lcd_init+0x1c>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 600:	88 60       	ori	r24, 0x08	; 8
 602:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 606:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 60a:	87 7f       	andi	r24, 0xF7	; 247
 60c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 610:	8f e9       	ldi	r24, 0x9F	; 159
 612:	9f e0       	ldi	r25, 0x0F	; 15
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <lcd_init+0x38>
 618:	00 c0       	rjmp	.+0      	; 0x61a <lcd_init+0x3e>
 61a:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 61c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 61e:	77 9b       	sbis	0x0e, 7	; 14
 620:	fe cf       	rjmp	.-4      	; 0x61e <lcd_init+0x42>
  SPDR = byte;                        //send payload
 622:	80 e3       	ldi	r24, 0x30	; 48
 624:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 626:	77 9b       	sbis	0x0e, 7	; 14
 628:	fe cf       	rjmp	.-4      	; 0x626 <lcd_init+0x4a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 62a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 62e:	88 60       	ori	r24, 0x08	; 8
 630:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 634:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 638:	87 7f       	andi	r24, 0xF7	; 247
 63a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 63e:	8f e9       	ldi	r24, 0x9F	; 159
 640:	9f e0       	ldi	r25, 0x0F	; 15
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <lcd_init+0x66>
 646:	00 c0       	rjmp	.+0      	; 0x648 <lcd_init+0x6c>
 648:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 64a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 64c:	77 9b       	sbis	0x0e, 7	; 14
 64e:	fe cf       	rjmp	.-4      	; 0x64c <lcd_init+0x70>
  SPDR = byte;                        //send payload
 650:	80 e3       	ldi	r24, 0x30	; 48
 652:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 654:	77 9b       	sbis	0x0e, 7	; 14
 656:	fe cf       	rjmp	.-4      	; 0x654 <lcd_init+0x78>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 658:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 65c:	88 60       	ori	r24, 0x08	; 8
 65e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 662:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 666:	87 7f       	andi	r24, 0xF7	; 247
 668:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 66c:	8f e9       	ldi	r24, 0x9F	; 159
 66e:	9f e0       	ldi	r25, 0x0F	; 15
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <lcd_init+0x94>
 674:	00 c0       	rjmp	.+0      	; 0x676 <lcd_init+0x9a>
 676:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 678:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 67a:	77 9b       	sbis	0x0e, 7	; 14
 67c:	fe cf       	rjmp	.-4      	; 0x67a <lcd_init+0x9e>
  SPDR = byte;                        //send payload
 67e:	88 e3       	ldi	r24, 0x38	; 56
 680:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 682:	77 9b       	sbis	0x0e, 7	; 14
 684:	fe cf       	rjmp	.-4      	; 0x682 <lcd_init+0xa6>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 686:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 68a:	88 60       	ori	r24, 0x08	; 8
 68c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 690:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 694:	87 7f       	andi	r24, 0xF7	; 247
 696:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 69a:	8f e9       	ldi	r24, 0x9F	; 159
 69c:	9f e0       	ldi	r25, 0x0F	; 15
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <lcd_init+0xc2>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <lcd_init+0xc8>
 6a4:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6a6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a8:	77 9b       	sbis	0x0e, 7	; 14
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
 6ac:	88 e0       	ldi	r24, 0x08	; 8
 6ae:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6b0:	77 9b       	sbis	0x0e, 7	; 14
 6b2:	fe cf       	rjmp	.-4      	; 0x6b0 <lcd_init+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b8:	88 60       	ori	r24, 0x08	; 8
 6ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6c2:	87 7f       	andi	r24, 0xF7	; 247
 6c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6c8:	8f e9       	ldi	r24, 0x9F	; 159
 6ca:	9f e0       	ldi	r25, 0x0F	; 15
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <lcd_init+0xf0>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <lcd_init+0xf6>
 6d2:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6d4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6d6:	77 9b       	sbis	0x0e, 7	; 14
 6d8:	fe cf       	rjmp	.-4      	; 0x6d6 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6de:	77 9b       	sbis	0x0e, 7	; 14
 6e0:	fe cf       	rjmp	.-4      	; 0x6de <lcd_init+0x102>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6e6:	88 60       	ori	r24, 0x08	; 8
 6e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f0:	87 7f       	andi	r24, 0xF7	; 247
 6f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f6:	8f e9       	ldi	r24, 0x9F	; 159
 6f8:	9f e0       	ldi	r25, 0x0F	; 15
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <lcd_init+0x11e>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <lcd_init+0x124>
 700:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 702:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 704:	77 9b       	sbis	0x0e, 7	; 14
 706:	fe cf       	rjmp	.-4      	; 0x704 <lcd_init+0x128>
  SPDR = byte;                        //send payload
 708:	86 e0       	ldi	r24, 0x06	; 6
 70a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 70c:	77 9b       	sbis	0x0e, 7	; 14
 70e:	fe cf       	rjmp	.-4      	; 0x70c <lcd_init+0x130>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 710:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 714:	88 60       	ori	r24, 0x08	; 8
 716:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 71a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 71e:	87 7f       	andi	r24, 0xF7	; 247
 720:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 724:	8f e9       	ldi	r24, 0x9F	; 159
 726:	9f e0       	ldi	r25, 0x0F	; 15
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <lcd_init+0x14c>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <lcd_init+0x152>
 72e:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 730:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 732:	77 9b       	sbis	0x0e, 7	; 14
 734:	fe cf       	rjmp	.-4      	; 0x732 <lcd_init+0x156>
  SPDR = byte;                        //send payload
 736:	8c e0       	ldi	r24, 0x0C	; 12
 738:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 73a:	77 9b       	sbis	0x0e, 7	; 14
 73c:	fe cf       	rjmp	.-4      	; 0x73a <lcd_init+0x15e>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 73e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 742:	88 60       	ori	r24, 0x08	; 8
 744:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 748:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 74c:	87 7f       	andi	r24, 0xF7	; 247
 74e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 752:	8f e9       	ldi	r24, 0x9F	; 159
 754:	9f e0       	ldi	r25, 0x0F	; 15
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	f1 f7       	brne	.-4      	; 0x756 <lcd_init+0x17a>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <lcd_init+0x180>
 75c:	00 00       	nop
  //send_lcd(CMD_BYTE, 0x08, 5000);
  send_lcd(CMD_BYTE, 0x01, 5000);  //clear display
  send_lcd(CMD_BYTE, 0x06, 5000);  //cursor moves to right, don't shift display
  send_lcd(CMD_BYTE, 0x0C | (CURSOR_VISIBLE<<1) | CURSOR_BLINK, 5);
#endif
}
 75e:	08 95       	ret

00000760 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 760:	6f 92       	push	r6
 762:	7f 92       	push	r7
 764:	8f 92       	push	r8
 766:	9f 92       	push	r9
 768:	af 92       	push	r10
 76a:	bf 92       	push	r11
 76c:	cf 92       	push	r12
 76e:	df 92       	push	r13
 770:	ef 92       	push	r14
 772:	ff 92       	push	r15
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
 780:	69 97       	sbiw	r28, 0x19	; 25
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	f8 94       	cli
 786:	de bf       	out	0x3e, r29	; 62
 788:	0f be       	out	0x3f, r0	; 63
 78a:	cd bf       	out	0x3d, r28	; 61
 78c:	f4 2e       	mov	r15, r20
 78e:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 790:	00 23       	and	r16, r16
 792:	59 f0       	breq	.+22     	; 0x7aa <lcd_int32+0x4a>
        bSigned = (qr.quot<0);
 794:	4b 01       	movw	r8, r22
 796:	5c 01       	movw	r10, r24
 798:	88 24       	eor	r8, r8
 79a:	b7 fc       	sbrc	r11, 7
 79c:	83 94       	inc	r8
 79e:	99 24       	eor	r9, r9
 7a0:	aa 24       	eor	r10, r10
 7a2:	bb 24       	eor	r11, r11
 7a4:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
 7a6:	97 fd       	sbrc	r25, 7
 7a8:	b1 c0       	rjmp	.+354    	; 0x90c <lcd_int32+0x1ac>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 7aa:	11 11       	cpse	r17, r1
 7ac:	7f c0       	rjmp	.+254    	; 0x8ac <lcd_int32+0x14c>
 7ae:	9e 01       	movw	r18, r28
 7b0:	2f 5f       	subi	r18, 0xFF	; 255
 7b2:	3f 4f       	sbci	r19, 0xFF	; 255
 7b4:	69 01       	movw	r12, r18
        sline[i++] = '.';
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 7b6:	2a e0       	ldi	r18, 0x0A	; 10
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	40 e0       	ldi	r20, 0x00	; 0
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	0e 94 d2 05 	call	0xba4	; 0xba4 <__divmodsi4>
 7c2:	f6 2f       	mov	r31, r22
 7c4:	2a 8b       	std	Y+18, r18	; 0x12
 7c6:	3b 8b       	std	Y+19, r19	; 0x13
 7c8:	4c 8b       	std	Y+20, r20	; 0x14
 7ca:	5d 8b       	std	Y+21, r21	; 0x15
 7cc:	6e 8b       	std	Y+22, r22	; 0x16
 7ce:	7f 8b       	std	Y+23, r23	; 0x17
 7d0:	88 8f       	std	Y+24, r24	; 0x18
 7d2:	99 8f       	std	Y+25, r25	; 0x19
 7d4:	6a 89       	ldd	r22, Y+18	; 0x12
 7d6:	7b 89       	ldd	r23, Y+19	; 0x13
 7d8:	8c 89       	ldd	r24, Y+20	; 0x14
 7da:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 7dc:	e1 e0       	ldi	r30, 0x01	; 1
 7de:	e1 0f       	add	r30, r17
 7e0:	d6 01       	movw	r26, r12
 7e2:	a1 0f       	add	r26, r17
 7e4:	b1 1d       	adc	r27, r1
 7e6:	f0 5d       	subi	r31, 0xD0	; 208
 7e8:	fc 93       	st	X, r31
 7ea:	1e 2f       	mov	r17, r30
        }while(qr.quot);
 7ec:	61 15       	cp	r22, r1
 7ee:	71 05       	cpc	r23, r1
 7f0:	81 05       	cpc	r24, r1
 7f2:	91 05       	cpc	r25, r1
 7f4:	01 f7       	brne	.-64     	; 0x7b6 <lcd_int32+0x56>

      // fill the whole field if a width was specified
      if (fieldwidth){
 7f6:	ff 20       	and	r15, r15
 7f8:	e1 f0       	breq	.+56     	; 0x832 <lcd_int32+0xd2>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 7fa:	20 e3       	ldi	r18, 0x30	; 48
 7fc:	e1 10       	cpse	r14, r1
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <lcd_int32+0xa2>
 800:	20 e2       	ldi	r18, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 802:	ef 15       	cp	r30, r15
 804:	b0 f4       	brcc	.+44     	; 0x832 <lcd_int32+0xd2>
 806:	4e 2f       	mov	r20, r30
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	d6 01       	movw	r26, r12
 80c:	a4 0f       	add	r26, r20
 80e:	b5 1f       	adc	r27, r21
 810:	82 e0       	ldi	r24, 0x02	; 2
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	8c 0f       	add	r24, r28
 816:	9d 1f       	adc	r25, r29
 818:	48 0f       	add	r20, r24
 81a:	59 1f       	adc	r21, r25
 81c:	8f ef       	ldi	r24, 0xFF	; 255
 81e:	8f 0d       	add	r24, r15
 820:	8e 1b       	sub	r24, r30
 822:	84 0f       	add	r24, r20
 824:	95 2f       	mov	r25, r21
 826:	91 1d       	adc	r25, r1
 828:	2d 93       	st	X+, r18
 82a:	a8 17       	cp	r26, r24
 82c:	b9 07       	cpc	r27, r25
 82e:	e1 f7       	brne	.-8      	; 0x828 <lcd_int32+0xc8>
 830:	ef 2d       	mov	r30, r15
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 832:	00 23       	and	r16, r16
 834:	31 f0       	breq	.+12     	; 0x842 <lcd_int32+0xe2>
 836:	d6 01       	movw	r26, r12
 838:	ae 0f       	add	r26, r30
 83a:	b1 1d       	adc	r27, r1
 83c:	8d e2       	ldi	r24, 0x2D	; 45
 83e:	8c 93       	st	X, r24
 840:	ef 5f       	subi	r30, 0xFF	; 255
 842:	e1 50       	subi	r30, 0x01	; 1
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	31 96       	adiw	r30, 0x01	; 1
 848:	ec 0d       	add	r30, r12
 84a:	fd 1d       	adc	r31, r13
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 84c:	91 e0       	ldi	r25, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 84e:	82 91       	ld	r24, -Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 850:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 852:	77 9b       	sbis	0x0e, 7	; 14
 854:	fe cf       	rjmp	.-4      	; 0x852 <lcd_int32+0xf2>
  SPDR = byte;                        //send payload
 856:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 858:	77 9b       	sbis	0x0e, 7	; 14
 85a:	fe cf       	rjmp	.-4      	; 0x858 <lcd_int32+0xf8>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 85c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 860:	88 60       	ori	r24, 0x08	; 8
 862:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 866:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 86a:	87 7f       	andi	r24, 0xF7	; 247
 86c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 870:	af e9       	ldi	r26, 0x9F	; 159
 872:	bf e0       	ldi	r27, 0x0F	; 15
 874:	11 97       	sbiw	r26, 0x01	; 1
 876:	f1 f7       	brne	.-4      	; 0x874 <lcd_int32+0x114>
 878:	00 c0       	rjmp	.+0      	; 0x87a <lcd_int32+0x11a>
 87a:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 87c:	ce 16       	cp	r12, r30
 87e:	df 06       	cpc	r13, r31
 880:	31 f7       	brne	.-52     	; 0x84e <lcd_int32+0xee>

}
 882:	69 96       	adiw	r28, 0x19	; 25
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	f8 94       	cli
 888:	de bf       	out	0x3e, r29	; 62
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	cd bf       	out	0x3d, r28	; 61
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	1f 91       	pop	r17
 894:	0f 91       	pop	r16
 896:	ff 90       	pop	r15
 898:	ef 90       	pop	r14
 89a:	df 90       	pop	r13
 89c:	cf 90       	pop	r12
 89e:	bf 90       	pop	r11
 8a0:	af 90       	pop	r10
 8a2:	9f 90       	pop	r9
 8a4:	8f 90       	pop	r8
 8a6:	7f 90       	pop	r7
 8a8:	6f 90       	pop	r6
 8aa:	08 95       	ret
 8ac:	de 01       	movw	r26, r28
 8ae:	11 96       	adiw	r26, 0x01	; 1
 8b0:	6d 01       	movw	r12, r26
 8b2:	4d 01       	movw	r8, r26
 8b4:	5d 01       	movw	r10, r26
 8b6:	bf ef       	ldi	r27, 0xFF	; 255
 8b8:	ab 1a       	sub	r10, r27
 8ba:	bb 0a       	sbc	r11, r27
 8bc:	66 24       	eor	r6, r6
 8be:	6a 94       	dec	r6
 8c0:	61 0e       	add	r6, r17
 8c2:	6a 0c       	add	r6, r10
 8c4:	7b 2c       	mov	r7, r11
 8c6:	71 1c       	adc	r7, r1
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <lcd_int32+0x172>
 8ca:	95 01       	movw	r18, r10
 8cc:	2f 5f       	subi	r18, 0xFF	; 255
 8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 8d0:	59 01       	movw	r10, r18
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 8d2:	2a e0       	ldi	r18, 0x0A	; 10
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	40 e0       	ldi	r20, 0x00	; 0
 8d8:	50 e0       	ldi	r21, 0x00	; 0
 8da:	0e 94 d2 05 	call	0xba4	; 0xba4 <__divmodsi4>
 8de:	e6 2f       	mov	r30, r22
 8e0:	2a 8b       	std	Y+18, r18	; 0x12
 8e2:	3b 8b       	std	Y+19, r19	; 0x13
 8e4:	4c 8b       	std	Y+20, r20	; 0x14
 8e6:	5d 8b       	std	Y+21, r21	; 0x15
 8e8:	6a 89       	ldd	r22, Y+18	; 0x12
 8ea:	7b 89       	ldd	r23, Y+19	; 0x13
 8ec:	8c 89       	ldd	r24, Y+20	; 0x14
 8ee:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 8f0:	e0 5d       	subi	r30, 0xD0	; 208
 8f2:	d4 01       	movw	r26, r8
 8f4:	ec 93       	st	X, r30
 8f6:	45 01       	movw	r8, r10
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 8f8:	a6 14       	cp	r10, r6
 8fa:	b7 04       	cpc	r11, r7
 8fc:	31 f7       	brne	.-52     	; 0x8ca <lcd_int32+0x16a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 8fe:	f6 01       	movw	r30, r12
 900:	e1 0f       	add	r30, r17
 902:	f1 1d       	adc	r31, r1
 904:	2e e2       	ldi	r18, 0x2E	; 46
 906:	20 83       	st	Z, r18
 908:	1f 5f       	subi	r17, 0xFF	; 255
 90a:	55 cf       	rjmp	.-342    	; 0x7b6 <lcd_int32+0x56>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 90c:	90 95       	com	r25
 90e:	80 95       	com	r24
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	47 cf       	rjmp	.-370    	; 0x7aa <lcd_int32+0x4a>

0000091c <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
 91c:	5f 92       	push	r5
 91e:	6f 92       	push	r6
 920:	7f 92       	push	r7
 922:	8f 92       	push	r8
 924:	9f 92       	push	r9
 926:	af 92       	push	r10
 928:	bf 92       	push	r11
 92a:	cf 92       	push	r12
 92c:	df 92       	push	r13
 92e:	ef 92       	push	r14
 930:	ff 92       	push	r15
 932:	0f 93       	push	r16
 934:	1f 93       	push	r17
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
 93e:	61 97       	sbiw	r28, 0x11	; 17
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
 94a:	3c 01       	movw	r6, r24
 94c:	56 2e       	mov	r5, r22
 94e:	14 2f       	mov	r17, r20
 950:	02 2f       	mov	r16, r18
 952:	9c 01       	movw	r18, r24
 954:	97 ff       	sbrs	r25, 7
 956:	04 c0       	rjmp	.+8      	; 0x960 <lcd_int16+0x44>
 958:	22 27       	eor	r18, r18
 95a:	33 27       	eor	r19, r19
 95c:	28 1b       	sub	r18, r24
 95e:	39 0b       	sbc	r19, r25

        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
 960:	11 11       	cpse	r17, r1
 962:	28 c0       	rjmp	.+80     	; 0x9b4 <lcd_int16+0x98>
 964:	ae 01       	movw	r20, r28
 966:	4f 5f       	subi	r20, 0xFF	; 255
 968:	5f 4f       	sbci	r21, 0xFF	; 255
 96a:	7a 01       	movw	r14, r20
 96c:	01 c0       	rjmp	.+2      	; 0x970 <lcd_int16+0x54>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
 96e:	1a 2f       	mov	r17, r26
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
 970:	6a e0       	ldi	r22, 0x0A	; 10
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	c9 01       	movw	r24, r18
 976:	0e 94 be 05 	call	0xb7c	; 0xb7c <__divmodhi4>
 97a:	46 2f       	mov	r20, r22
 97c:	24 2f       	mov	r18, r20
 97e:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
 980:	a1 e0       	ldi	r26, 0x01	; 1
 982:	a1 0f       	add	r26, r17
 984:	f7 01       	movw	r30, r14
 986:	e1 0f       	add	r30, r17
 988:	f1 1d       	adc	r31, r1
 98a:	80 5d       	subi	r24, 0xD0	; 208
 98c:	80 83       	st	Z, r24
        }
        while(qr.quot);
 98e:	21 15       	cp	r18, r1
 990:	31 05       	cpc	r19, r1
 992:	69 f7       	brne	.-38     	; 0x96e <lcd_int16+0x52>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
 994:	01 11       	cpse	r16, r1
 996:	36 c0       	rjmp	.+108    	; 0xa04 <lcd_int16+0xe8>
 998:	77 fc       	sbrc	r7, 7
 99a:	8f c0       	rjmp	.+286    	; 0xaba <lcd_int16+0x19e>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 99c:	55 20       	and	r5, r5
 99e:	41 f0       	breq	.+16     	; 0x9b0 <lcd_int16+0x94>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 9a0:	8a 2f       	mov	r24, r26
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	25 2d       	mov	r18, r5
 9a6:	30 e0       	ldi	r19, 0x00	; 0
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 9a8:	40 e2       	ldi	r20, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 9aa:	a5 15       	cp	r26, r5
 9ac:	08 f4       	brcc	.+2      	; 0x9b0 <lcd_int16+0x94>
 9ae:	7a c0       	rjmp	.+244    	; 0xaa4 <lcd_int16+0x188>
 9b0:	ea 2f       	mov	r30, r26
 9b2:	37 c0       	rjmp	.+110    	; 0xa22 <lcd_int16+0x106>
 9b4:	ce 01       	movw	r24, r28
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	7c 01       	movw	r14, r24
 9ba:	5c 01       	movw	r10, r24
 9bc:	6c 01       	movw	r12, r24
 9be:	9f ef       	ldi	r25, 0xFF	; 255
 9c0:	c9 1a       	sub	r12, r25
 9c2:	d9 0a       	sbc	r13, r25
 9c4:	88 24       	eor	r8, r8
 9c6:	8a 94       	dec	r8
 9c8:	81 0e       	add	r8, r17
 9ca:	8c 0c       	add	r8, r12
 9cc:	9d 2c       	mov	r9, r13
 9ce:	91 1c       	adc	r9, r1
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <lcd_int16+0xbc>
 9d2:	f6 01       	movw	r30, r12
 9d4:	31 96       	adiw	r30, 0x01	; 1
 9d6:	6f 01       	movw	r12, r30
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
 9d8:	6a e0       	ldi	r22, 0x0A	; 10
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	c9 01       	movw	r24, r18
 9de:	0e 94 be 05 	call	0xb7c	; 0xb7c <__divmodhi4>
 9e2:	46 2f       	mov	r20, r22
 9e4:	24 2f       	mov	r18, r20
 9e6:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
 9e8:	80 5d       	subi	r24, 0xD0	; 208
 9ea:	d5 01       	movw	r26, r10
 9ec:	8c 93       	st	X, r24
 9ee:	56 01       	movw	r10, r12
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
 9f0:	8c 14       	cp	r8, r12
 9f2:	9d 04       	cpc	r9, r13
 9f4:	71 f7       	brne	.-36     	; 0x9d2 <lcd_int16+0xb6>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
 9f6:	f7 01       	movw	r30, r14
 9f8:	e1 0f       	add	r30, r17
 9fa:	f1 1d       	adc	r31, r1
 9fc:	8e e2       	ldi	r24, 0x2E	; 46
 9fe:	80 83       	st	Z, r24
 a00:	1f 5f       	subi	r17, 0xFF	; 255
 a02:	b6 cf       	rjmp	.-148    	; 0x970 <lcd_int16+0x54>
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
 a04:	07 2d       	mov	r16, r7
 a06:	00 1f       	adc	r16, r16
 a08:	00 27       	eor	r16, r16
 a0a:	00 1f       	adc	r16, r16
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 a0c:	51 10       	cpse	r5, r1
 a0e:	3f c0       	rjmp	.+126    	; 0xa8e <lcd_int16+0x172>
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
 a10:	00 23       	and	r16, r16
 a12:	71 f2       	breq	.-100    	; 0x9b0 <lcd_int16+0x94>
 a14:	e1 e0       	ldi	r30, 0x01	; 1
 a16:	ea 0f       	add	r30, r26
 a18:	ae 0d       	add	r26, r14
 a1a:	bf 2d       	mov	r27, r15
 a1c:	b1 1d       	adc	r27, r1
 a1e:	8d e2       	ldi	r24, 0x2D	; 45
 a20:	8c 93       	st	X, r24
 a22:	e1 50       	subi	r30, 0x01	; 1
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	31 96       	adiw	r30, 0x01	; 1
 a28:	ee 0d       	add	r30, r14
 a2a:	ff 1d       	adc	r31, r15
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 a2c:	91 e0       	ldi	r25, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 a2e:	82 91       	ld	r24, -Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 a30:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 a32:	77 9b       	sbis	0x0e, 7	; 14
 a34:	fe cf       	rjmp	.-4      	; 0xa32 <lcd_int16+0x116>
  SPDR = byte;                        //send payload
 a36:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 a38:	77 9b       	sbis	0x0e, 7	; 14
 a3a:	fe cf       	rjmp	.-4      	; 0xa38 <lcd_int16+0x11c>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 a3c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a40:	88 60       	ori	r24, 0x08	; 8
 a42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a46:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a4a:	87 7f       	andi	r24, 0xF7	; 247
 a4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a50:	af e9       	ldi	r26, 0x9F	; 159
 a52:	bf e0       	ldi	r27, 0x0F	; 15
 a54:	11 97       	sbiw	r26, 0x01	; 1
 a56:	f1 f7       	brne	.-4      	; 0xa54 <lcd_int16+0x138>
 a58:	00 c0       	rjmp	.+0      	; 0xa5a <lcd_int16+0x13e>
 a5a:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 a5c:	ee 16       	cp	r14, r30
 a5e:	ff 06       	cpc	r15, r31
 a60:	31 f7       	brne	.-52     	; 0xa2e <lcd_int16+0x112>
}
 a62:	61 96       	adiw	r28, 0x11	; 17
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	f8 94       	cli
 a68:	de bf       	out	0x3e, r29	; 62
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	cd bf       	out	0x3d, r28	; 61
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	ff 90       	pop	r15
 a78:	ef 90       	pop	r14
 a7a:	df 90       	pop	r13
 a7c:	cf 90       	pop	r12
 a7e:	bf 90       	pop	r11
 a80:	af 90       	pop	r10
 a82:	9f 90       	pop	r9
 a84:	8f 90       	pop	r8
 a86:	7f 90       	pop	r7
 a88:	6f 90       	pop	r6
 a8a:	5f 90       	pop	r5
 a8c:	08 95       	ret

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 a8e:	8a 2f       	mov	r24, r26
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	45 2d       	mov	r20, r5
 a94:	40 1b       	sub	r20, r16
 a96:	55 0b       	sbc	r21, r21
 a98:	9a 01       	movw	r18, r20
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 a9a:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 a9c:	82 17       	cp	r24, r18
 a9e:	93 07       	cpc	r25, r19
 aa0:	0c f0       	brlt	.+2      	; 0xaa4 <lcd_int16+0x188>
 aa2:	b6 cf       	rjmp	.-148    	; 0xa10 <lcd_int16+0xf4>
 aa4:	af 5f       	subi	r26, 0xFF	; 255
 aa6:	8e 0d       	add	r24, r14
 aa8:	9f 1d       	adc	r25, r15
 aaa:	fc 01       	movw	r30, r24
 aac:	40 83       	st	Z, r20
 aae:	8a 2f       	mov	r24, r26
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	82 17       	cp	r24, r18
 ab4:	93 07       	cpc	r25, r19
 ab6:	b4 f3       	brlt	.-20     	; 0xaa4 <lcd_int16+0x188>
 ab8:	ab cf       	rjmp	.-170    	; 0xa10 <lcd_int16+0xf4>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 aba:	e2 e0       	ldi	r30, 0x02	; 2
 abc:	e1 0f       	add	r30, r17
 abe:	ae 0d       	add	r26, r14
 ac0:	bf 2d       	mov	r27, r15
 ac2:	b1 1d       	adc	r27, r1
 ac4:	8d e2       	ldi	r24, 0x2D	; 45
 ac6:	8c 93       	st	X, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 ac8:	55 20       	and	r5, r5
 aca:	09 f4       	brne	.+2      	; 0xace <lcd_int16+0x1b2>
 acc:	aa cf       	rjmp	.-172    	; 0xa22 <lcd_int16+0x106>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 ace:	8e 2f       	mov	r24, r30
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	25 2d       	mov	r18, r5
 ad4:	30 e0       	ldi	r19, 0x00	; 0
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 ad6:	ae 2f       	mov	r26, r30
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 ad8:	40 e2       	ldi	r20, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 ada:	82 17       	cp	r24, r18
 adc:	93 07       	cpc	r25, r19
 ade:	14 f3       	brlt	.-60     	; 0xaa4 <lcd_int16+0x188>
 ae0:	a0 cf       	rjmp	.-192    	; 0xa22 <lcd_int16+0x106>

00000ae2 <main>:
//div_t    fp_adc_result, fp_low_result;  //double fp_adc_result; 

/*******************************************************/
void spi_init(void){
 /* Run this code before attempting to write to the LCD.*/
 DDRF  |= 0x08;  //port F bit 3 is enabling for LCD
 ae2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 ae6:	88 60       	ori	r24, 0x08	; 8
 ae8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 PORTF &= 0xF7;  //port F bit 3 is initially low
 aec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 af0:	87 7f       	andi	r24, 0xF7	; 247
 af2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

 DDRB  |= 0x07;  //Turn on SS_n, MOSI, SCLK. SS_n must be out for MSTR mode
 af6:	87 b3       	in	r24, 0x17	; 23
 af8:	87 60       	ori	r24, 0x07	; 7
 afa:	87 bb       	out	0x17, r24	; 23
//see: /$install_path/avr/include/avr/iom128.h for bit definitions   

 //Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
 SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
 afc:	80 e5       	ldi	r24, 0x50	; 80
 afe:	8d b9       	out	0x0d, r24	; 13
 SPSR=(1<<SPI2X);           //SPI at 2x speed (8 MHz)  
 b00:	81 e0       	ldi	r24, 0x01	; 1
 b02:	8e b9       	out	0x0e, r24	; 14

int main()
{
//initalize the SPI port then the LCD
spi_init();
lcd_init(); 
 b04:	0e 94 ee 02 	call	0x5dc	; 0x5dc <lcd_init>
clear_display();
 b08:	0e 94 43 02 	call	0x486	; 0x486 <clear_display>

//Initalize ADC and its ports
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
 b0c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 b10:	8f 77       	andi	r24, 0x7F	; 127
 b12:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
 b16:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b1a:	8f 77       	andi	r24, 0x7F	; 127
 b1c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

ADMUX = (1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<REFS0); //single-ended input, PORTF bit 7, right adjusted, 10 bits
 b20:	87 e4       	ldi	r24, 0x47	; 71
 b22:	87 b9       	out	0x07, r24	; 7
                                         //reference is AVCC

ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //ADC enabled, don't start yet, single shot mode 
 b24:	87 e8       	ldi	r24, 0x87	; 135
 b26:	86 b9       	out	0x06, r24	; 6
                                         //division factor is 128 (125khz)
while(1){ 
  ADCSRA |= (1<<ADSC);                   //poke the ADSC bit and start conversion
 b28:	36 9a       	sbi	0x06, 6	; 6

  while(bit_is_clear(ADCSRA, ADIF));     //spin while interrupt flag not set
 b2a:	34 9b       	sbis	0x06, 4	; 6
 b2c:	fe cf       	rjmp	.-4      	; 0xb2a <main+0x48>

  ADCSRA |= (1<<ADIF);                   //its done, clear flag by writing a one 
 b2e:	34 9a       	sbi	0x06, 4	; 6

  adc_result = ADC;                      //read the ADC output as 16 bits
 b30:	84 b1       	in	r24, 0x04	; 4
 b32:	95 b1       	in	r25, 0x05	; 5
 b34:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <adc_result+0x1>
 b38:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_result>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 b3c:	4a e0       	ldi	r20, 0x0A	; 10
 b3e:	64 e0       	ldi	r22, 0x04	; 4
 b40:	71 e0       	ldi	r23, 0x01	; 1
 b42:	0e 94 27 06 	call	0xc4e	; 0xc4e <__itoa_ncheck>
  //char2lcd('.');          //write decimal point
  //string2lcd(lcd_str_l);  //write lower half

  //read original number
  itoa(adc_result, lcd_str_h, 10);
  string2lcd(lcd_str_h);
 b46:	84 e0       	ldi	r24, 0x04	; 4
 b48:	91 e0       	ldi	r25, 0x01	; 1
 b4a:	0e 94 bf 02 	call	0x57e	; 0x57e <string2lcd>

  for(i=0;i<=10;i++){ _delay_ms(50);}  //delay 0.5 sec
 b4e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b52:	2f ef       	ldi	r18, 0xFF	; 255
 b54:	80 e7       	ldi	r24, 0x70	; 112
 b56:	92 e0       	ldi	r25, 0x02	; 2
 b58:	21 50       	subi	r18, 0x01	; 1
 b5a:	80 40       	sbci	r24, 0x00	; 0
 b5c:	90 40       	sbci	r25, 0x00	; 0
 b5e:	e1 f7       	brne	.-8      	; 0xb58 <main+0x76>
 b60:	00 c0       	rjmp	.+0      	; 0xb62 <main+0x80>
 b62:	00 00       	nop
 b64:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i>
 b68:	8f 5f       	subi	r24, 0xFF	; 255
 b6a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <i>
 b6e:	8b 30       	cpi	r24, 0x0B	; 11
 b70:	80 f3       	brcs	.-32     	; 0xb52 <main+0x70>
  clear_display();
 b72:	0e 94 43 02 	call	0x486	; 0x486 <clear_display>
  cursor_home();
 b76:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <cursor_home>
                                         //reference is AVCC

ADCSRA = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2); //ADC enabled, don't start yet, single shot mode 
                                         //division factor is 128 (125khz)
while(1){ 
  ADCSRA |= (1<<ADSC);                   //poke the ADSC bit and start conversion
 b7a:	d6 cf       	rjmp	.-84     	; 0xb28 <main+0x46>

00000b7c <__divmodhi4>:
 b7c:	97 fb       	bst	r25, 7
 b7e:	07 2e       	mov	r0, r23
 b80:	16 f4       	brtc	.+4      	; 0xb86 <__divmodhi4+0xa>
 b82:	00 94       	com	r0
 b84:	07 d0       	rcall	.+14     	; 0xb94 <__divmodhi4_neg1>
 b86:	77 fd       	sbrc	r23, 7
 b88:	09 d0       	rcall	.+18     	; 0xb9c <__divmodhi4_neg2>
 b8a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__udivmodhi4>
 b8e:	07 fc       	sbrc	r0, 7
 b90:	05 d0       	rcall	.+10     	; 0xb9c <__divmodhi4_neg2>
 b92:	3e f4       	brtc	.+14     	; 0xba2 <__divmodhi4_exit>

00000b94 <__divmodhi4_neg1>:
 b94:	90 95       	com	r25
 b96:	81 95       	neg	r24
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	08 95       	ret

00000b9c <__divmodhi4_neg2>:
 b9c:	70 95       	com	r23
 b9e:	61 95       	neg	r22
 ba0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ba2 <__divmodhi4_exit>:
 ba2:	08 95       	ret

00000ba4 <__divmodsi4>:
 ba4:	05 2e       	mov	r0, r21
 ba6:	97 fb       	bst	r25, 7
 ba8:	1e f4       	brtc	.+6      	; 0xbb0 <__divmodsi4+0xc>
 baa:	00 94       	com	r0
 bac:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__negsi2>
 bb0:	57 fd       	sbrc	r21, 7
 bb2:	07 d0       	rcall	.+14     	; 0xbc2 <__divmodsi4_neg2>
 bb4:	0e 94 05 06 	call	0xc0a	; 0xc0a <__udivmodsi4>
 bb8:	07 fc       	sbrc	r0, 7
 bba:	03 d0       	rcall	.+6      	; 0xbc2 <__divmodsi4_neg2>
 bbc:	4e f4       	brtc	.+18     	; 0xbd0 <__divmodsi4_exit>
 bbe:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__negsi2>

00000bc2 <__divmodsi4_neg2>:
 bc2:	50 95       	com	r21
 bc4:	40 95       	com	r20
 bc6:	30 95       	com	r19
 bc8:	21 95       	neg	r18
 bca:	3f 4f       	sbci	r19, 0xFF	; 255
 bcc:	4f 4f       	sbci	r20, 0xFF	; 255
 bce:	5f 4f       	sbci	r21, 0xFF	; 255

00000bd0 <__divmodsi4_exit>:
 bd0:	08 95       	ret

00000bd2 <__negsi2>:
 bd2:	90 95       	com	r25
 bd4:	80 95       	com	r24
 bd6:	70 95       	com	r23
 bd8:	61 95       	neg	r22
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	08 95       	ret

00000be2 <__udivmodhi4>:
 be2:	aa 1b       	sub	r26, r26
 be4:	bb 1b       	sub	r27, r27
 be6:	51 e1       	ldi	r21, 0x11	; 17
 be8:	07 c0       	rjmp	.+14     	; 0xbf8 <__udivmodhi4_ep>

00000bea <__udivmodhi4_loop>:
 bea:	aa 1f       	adc	r26, r26
 bec:	bb 1f       	adc	r27, r27
 bee:	a6 17       	cp	r26, r22
 bf0:	b7 07       	cpc	r27, r23
 bf2:	10 f0       	brcs	.+4      	; 0xbf8 <__udivmodhi4_ep>
 bf4:	a6 1b       	sub	r26, r22
 bf6:	b7 0b       	sbc	r27, r23

00000bf8 <__udivmodhi4_ep>:
 bf8:	88 1f       	adc	r24, r24
 bfa:	99 1f       	adc	r25, r25
 bfc:	5a 95       	dec	r21
 bfe:	a9 f7       	brne	.-22     	; 0xbea <__udivmodhi4_loop>
 c00:	80 95       	com	r24
 c02:	90 95       	com	r25
 c04:	bc 01       	movw	r22, r24
 c06:	cd 01       	movw	r24, r26
 c08:	08 95       	ret

00000c0a <__udivmodsi4>:
 c0a:	a1 e2       	ldi	r26, 0x21	; 33
 c0c:	1a 2e       	mov	r1, r26
 c0e:	aa 1b       	sub	r26, r26
 c10:	bb 1b       	sub	r27, r27
 c12:	fd 01       	movw	r30, r26
 c14:	0d c0       	rjmp	.+26     	; 0xc30 <__udivmodsi4_ep>

00000c16 <__udivmodsi4_loop>:
 c16:	aa 1f       	adc	r26, r26
 c18:	bb 1f       	adc	r27, r27
 c1a:	ee 1f       	adc	r30, r30
 c1c:	ff 1f       	adc	r31, r31
 c1e:	a2 17       	cp	r26, r18
 c20:	b3 07       	cpc	r27, r19
 c22:	e4 07       	cpc	r30, r20
 c24:	f5 07       	cpc	r31, r21
 c26:	20 f0       	brcs	.+8      	; 0xc30 <__udivmodsi4_ep>
 c28:	a2 1b       	sub	r26, r18
 c2a:	b3 0b       	sbc	r27, r19
 c2c:	e4 0b       	sbc	r30, r20
 c2e:	f5 0b       	sbc	r31, r21

00000c30 <__udivmodsi4_ep>:
 c30:	66 1f       	adc	r22, r22
 c32:	77 1f       	adc	r23, r23
 c34:	88 1f       	adc	r24, r24
 c36:	99 1f       	adc	r25, r25
 c38:	1a 94       	dec	r1
 c3a:	69 f7       	brne	.-38     	; 0xc16 <__udivmodsi4_loop>
 c3c:	60 95       	com	r22
 c3e:	70 95       	com	r23
 c40:	80 95       	com	r24
 c42:	90 95       	com	r25
 c44:	9b 01       	movw	r18, r22
 c46:	ac 01       	movw	r20, r24
 c48:	bd 01       	movw	r22, r26
 c4a:	cf 01       	movw	r24, r30
 c4c:	08 95       	ret

00000c4e <__itoa_ncheck>:
 c4e:	bb 27       	eor	r27, r27
 c50:	4a 30       	cpi	r20, 0x0A	; 10
 c52:	31 f4       	brne	.+12     	; 0xc60 <__itoa_ncheck+0x12>
 c54:	99 23       	and	r25, r25
 c56:	22 f4       	brpl	.+8      	; 0xc60 <__itoa_ncheck+0x12>
 c58:	bd e2       	ldi	r27, 0x2D	; 45
 c5a:	90 95       	com	r25
 c5c:	81 95       	neg	r24
 c5e:	9f 4f       	sbci	r25, 0xFF	; 255
 c60:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__utoa_common>

00000c64 <__utoa_ncheck>:
 c64:	bb 27       	eor	r27, r27

00000c66 <__utoa_common>:
 c66:	fb 01       	movw	r30, r22
 c68:	55 27       	eor	r21, r21
 c6a:	aa 27       	eor	r26, r26
 c6c:	88 0f       	add	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	aa 1f       	adc	r26, r26
 c72:	a4 17       	cp	r26, r20
 c74:	10 f0       	brcs	.+4      	; 0xc7a <__utoa_common+0x14>
 c76:	a4 1b       	sub	r26, r20
 c78:	83 95       	inc	r24
 c7a:	50 51       	subi	r21, 0x10	; 16
 c7c:	b9 f7       	brne	.-18     	; 0xc6c <__utoa_common+0x6>
 c7e:	a0 5d       	subi	r26, 0xD0	; 208
 c80:	aa 33       	cpi	r26, 0x3A	; 58
 c82:	08 f0       	brcs	.+2      	; 0xc86 <__utoa_common+0x20>
 c84:	a9 5d       	subi	r26, 0xD9	; 217
 c86:	a1 93       	st	Z+, r26
 c88:	00 97       	sbiw	r24, 0x00	; 0
 c8a:	79 f7       	brne	.-34     	; 0xc6a <__utoa_common+0x4>
 c8c:	b1 11       	cpse	r27, r1
 c8e:	b1 93       	st	Z+, r27
 c90:	11 92       	st	Z+, r1
 c92:	cb 01       	movw	r24, r22
 c94:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <strrev>

00000c98 <strrev>:
 c98:	dc 01       	movw	r26, r24
 c9a:	fc 01       	movw	r30, r24
 c9c:	67 2f       	mov	r22, r23
 c9e:	71 91       	ld	r23, Z+
 ca0:	77 23       	and	r23, r23
 ca2:	e1 f7       	brne	.-8      	; 0xc9c <strrev+0x4>
 ca4:	32 97       	sbiw	r30, 0x02	; 2
 ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <strrev+0x18>
 ca8:	7c 91       	ld	r23, X
 caa:	6d 93       	st	X+, r22
 cac:	70 83       	st	Z, r23
 cae:	62 91       	ld	r22, -Z
 cb0:	ae 17       	cp	r26, r30
 cb2:	bf 07       	cpc	r27, r31
 cb4:	c8 f3       	brcs	.-14     	; 0xca8 <strrev+0x10>
 cb6:	08 95       	ret

00000cb8 <_exit>:
 cb8:	f8 94       	cli

00000cba <__stop_program>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba <__stop_program>
